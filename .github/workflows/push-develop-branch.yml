# Unique name for this workflow
name: Deploy Feature branch to Diffrentes Developement orgs

# Definition when the workflow should run
on:
    push:
      branches:
        - Feature/**
      paths:
        - 'force-app/**'
            

# Jobs to be executed
jobs:
    deploy-branch-to-dev-orgs:
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Install Salesforce CLI
            - name: 'Install Salesforce CLI'
              run: |
                  wget https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
                  mkdir ~/sfdx
                  tar xJf sfdx-linux-x64.tar.xz -C ~/sfdx --strip-components 1
                  echo "$HOME/sfdx/bin" >> $GITHUB_PATH
                  ~/sfdx/bin/sfdx version

            # install SFDX-Git-Delta plugin - https://github.com/scolladon/sfdx-git-delta
            - name: 'Installing sfdx git delta'
              run: | 
                  echo y | sfdx plugins:install sfdx-git-delta
                  sfdx plugins 

            # Install SFDX scanner
            - name: 'Installing SFDX scanner'
              run: sfdx plugins:install @salesforce/sfdx-scanner

            # Checkout the source code
            - name: 'Checkout source code'
              uses: actions/checkout@v2
              with:
                fetch-depth: 0

            # Install java as it is required for the next step
            - name: 'Installing java'
              run: sudo apt-get install openjdk-8-jdk

            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  sfdx sgd:source:delta --to "HEAD" --from "HEAD^" --output changed-sources/ --generate-delta --source force-app/

            # Now we can use the sfdx scanner to scan the code in the delta directory
            # The output of the scan is stored in a file called apexScanResults.sarif

            # The .sarif file can later be uploaded to github, so that we can see the 
            # results of the scan directly from the PR.

            - name: 'Scan code'
              run: |
                  cd changed-sources
                  ls
                  sfdx scanner:run --format sarif --target './**/*.cls' --category "Design,Best Practices,Performance,Code Style,Security" --outfile 'apexScanResults.sarif'  
                  cd ..

            # Now we upload the .sarif file as explained in the previous step
            - name: Upload SARIF file
              uses: github/codeql-action/upload-sarif@v2
              with:
                sarif_file: changed-sources/apexScanResults.sarif
            
            # Store secret for both otgs
            - name: 'Populate auth file with SFDX_URL secret of the NOB1 & DEV6'
              shell: bash
              run: |
                  echo ${{ secrets.SFDX_NOB1_URL}} > ./SFDX_NOB1_URL.txt
                  echo ${{ secrets.SFDX_DEV6_URL}} > ./SFDX_DEV6_URL.txt

            # Authenticate to NOB1 org
            - name: 'Authenticate to Nob1 Organization Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_NOB1_URL.txt -s -a nob1

            - name: 'Deploy the entire branch to Nob1 org'
              run: sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json

            - name: 'Deploy destructive changes (if any) to Nob1 org'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings

            # Authenticate to DEV6 org
            - name: 'Authenticate to Dev6 Organization Org'
              run: sfdx auth:sfdxurl:store -f ./SFDX_DEV6_URL.txt -s -a nob1

            - name: 'Deploy the entire branch to Dev6 org'
              run: sfdx force:source:deploy -p force-app --testlevel RunLocalTests --json

            - name: 'Deploy destructive changes (if any) to Dev6 org'
              run: sfdx force:mdapi:deploy -d "changed-sources/destructiveChanges" --checkonly --ignorewarnings